"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[174],{1174:function(e,t,n){n.r(t),t.default='# Personal Website\n\nMy personal portfolio website. The idea is a combination of a lot of concepts\nI\'ve seen online with my own personal flair. I\'ve always had this idea of the\n*right way to do something* (though I don\'t know how often I end up doing that),\nso my projects tend to be made from scratch because I like figuring things out.\nThis website is no exception to that.\n\n## The Concept\n\nThe main idea for the website was to create a "slide show" that gives a bit of\ninformation about myself. The homepage would be separate from the projects page\nsimply because I wanted my GitHub user page to redirect directly to the projects\npage. This would also mean that extensions to the URL would take users to any\ndeployed GitHub Pages I have. The homepage on the other hand is just another static\nGitHub Pages website.\n\n## The Design\n\nThe design concept can be seen in the wireframes I made:\n\n![Personal website wireframes](/images/kalvin-portfolio/wireframes.png)\n\nI wanted to keep the UI minimalistic and elegant. I\'ve always been inspired by\nthe UI/UX design paradigms because they give a lot of structure to something, so\nexpansive. For that reason, I like taking bits and pieces from different paradigms\nto make my components. For example, the **Button** component has a lot of inspiration\nfrom Material Design. I\'m particularly proud of creating a ripple effect as a\nReact hook, which means any component can potentially ripple, not just a button!\nI\'ve used this ripple effect in other projects, such as Urban Archaeology\'s\nWebsite.\n\nThis is the ripple expand:\n```js\n// We create the circle.\nconst circle = document.createElement("span");\nconst diameter = Math.max(target.clientWidth, target.clientHeight);\nconst radius = diameter / 2;\n\n// We then set the circle\'s styles.\ncircle.style.width = circle.style.height = `${diameter}px`;\ncircle.style.left = `${event.clientX - radius}px`;\ncircle.style.top = `${event.clientY - radius}px`;\ncircle.classList.add("ripple");\n\n// Check if the component already has a circle and remove it.\n// I might look into a way to have the original ripple fade\n// instead, so that there isn\'t just a tiny circle getting spammed.\nconst ripple = target.getElementsByClassName("ripple")[0];\nripple?.remove();\ntarget.appendChild(circle); //Here we append the new ripple.\n```\n\nThis is the ripple fade:\n```js\n// Getting the ripple circle.\nconst ripple = target.getElementsByClassName("ripple")[0];\nripple?.classList.add("ripple-fade"); // We add the fade animation.\nsetTimeout(() => ripple?.remove(), 600); // Set the timeout to kill it once the animation is over.\n```\n\nWhile the code is simple enough, I hadn\'t found anyone, in my research on recreating this\neffect on the web, whom employed the onMouseDown and onMouseUp pointer events. This is what\ngives my buttons the abillity to be held down to slowly watch the circle expand, and then\nreleasing to watch it fade away. Others tend to just spawn an expanding circle on click, which\nworks, but wasn\'t enough for me.\n\n## Technologies Used\n\nThis website was developed using Next.js and React.js. Certain components\nuse React Markdown and Highlight.js for stylizing.\n\n### Links\n##### React Markdown,https://github.com/remarkjs/react-markdown/\n##### Highligh.js,https://highlightjs.org/\n'}}]);